/** extra minification may be required
const code = ``.split('\n')
const beatIds = {
    Whole: 0,
    Half: 1,
    Quarter: 2,
    Eighth: 3,
    Sixteenth: 4,
    Double: 5,
    Breve: 6
}
const data = []
for (let str of code) {
    const strArr = str.split('(')
    if (str.charAt(6) == 'p') {
        const freq = parseInt(strArr[1].split(',')[0]);
        const beatName = strArr[2].split('.')[1].slice(0, -2);
        data.push([freq, beatIds[beatName]])
    } else if (str.charAt(6) == "r") {
        const beatName = strArr[2].split('.')[1].slice(0, -2)
        data.push(beatIds[beatName])
    }
}
const fs = require('fs');
fs.writeFileSync("music-conv-out.txt", JSON.stringify(data), {encoding: 'utf-8'})
 */

// data
const data = JSON.parse("[[349,0#349,1$392,1#392,0$262,0$392,1#392,0$440,1#440,0$523,2$466,2$440,1$349,0#349,1$392,1#392,0$262,1#262,5],4,0,[262,2$262,2$294,2$330,1$349,2$349,0#349,1$392,1#392,0$262,0$392,1#392,0$440,1#440,0$523,2$466,2$440,1$349,0#349,1$392,1#392,0$262,1#262,5$330,1$349,1$349,0],4,0,[349,2$349,1$349,2],0,[294,1$330,1$349,1$349,1$392,1$330,1#330,2$294,2$262,1#262,5],0,1,[294,1$294,1$330,1$349,1$294,0$262,1$523,1],1,[523,1$392,5],0,[294,1$294,1$330,1$349,1$294,1$349,1$392,1],1,[330,1$294,1$294,1#262,5],1,1,[294,1$294,1$330,1$349,1$294,1$262,0$392,1$392,1$392,1$440,1$392,0],0,[349,1#349,5$392,1$440,1$349,1$392,1$392,1$392,1$440,1$392,0$262,5],0,[294,1$330,1$349,1$294,1],1,[392,1$440,1$392,1#392,0#262,2$294,2$349,2$294,2$440,2#440,1$440,2#440,1$392,1#392,0$262,2$294,2$349,2$294,2$392,2#392,1$392,2#392,1$349,2#349,1$330,2$294,1$262,2$294,2$349,2$294,2$349,0$392,1$330,2#330,1$294,2$262,0$262,1$392,0$349,5],1,[262,2$294,2$349,2$294,2$440,2#440,1$440,2#440,1$392,1#392,0$262,2$294,2$349,2$294,2$523,0$330,1$349,2#349,1$330,2$294,1$262,2$294,2$349,2$294,2$349,0$392,1$330,2#330,1$294,2$262,0$262,1$392,0$349,5],5,[349,1$349,1$294,1$349,1$392,1$330,1#330,2$294,3$262,1#262,5],0,1,[294,1$294,1$330,1$349,1$294,0$262,1$523,1],1,[523,1$392,0$440,1$392,1$349,1],1,[294,1$294,1$330,1$349,1$294,1$349,1$392,1],1,[330,1$294,1$294,1#262,5],0,[294,1$294,1$330,1$349,1$294,1$262,0$392,1$392,1$392,1$440,1$392,0],0,[349,1#349,5$392,1$440,1$349,1$392,1$392,1$392,1$440,1$392,0$262,5],0,[294,1$330,1$349,1$294,1],1,[392,1$440,1$392,1#392,0$262,2$294,2$349,2$294,2$440,2#440,1$440,2#440,1$392,1#392,0$262,2$294,2$349,2$294,2$392,2#392,1$392,2#392,1$349,2#349,1$330,2$294,1$262,2$294,2$349,2$294,2$349,0$392,1$330,2#330,1$294,2$262,0$262,1$392,0$349,5],1,[262,2$294,2$349,2$294,2$440,2#440,1$440,2#440,1$392,1#392,0$262,2$294,2$349,2$294,2$523,0$330,1$349,2#349,1$330,2$294,1$262,2$294,2$349,2$294,2$349,0$392,1$330,2#330,1$294,2$262,0$262,1$392,0$349,5],0,[262,2$294,2$349,2$294,2$440,2#440,1$440,2#440,1$392,1#392,0$262,2$294,2$349,2$294,2$392,2#392,1$392,2#392,1$349,2#349,1$330,2$294,1$262,2$294,2$349,2$294,2$349,0$392,1$330,2#330,1$294,2$262,0$262,1$392,0$349,5],1,[262,2$294,2$349,2$294,2$440,2#440,1$440,2#440,1$392,1#392,0$262,2$294,2$349,2$294,2$523,0$330,1$349,2#349,1$330,2$294,1$262,2$294,2$349,2$294,2$349,0$392,1$330,2#330,1$294,2$262,0$262,1$392,0$349,5],0,[523,6$349,2#349,1$349,2],1,[330,1],5,[523,6$349,2#349,1$349,2],1,[330,1],5,[262,2$294,2$349,2$294,2$440,1$262,2$294,2$349,2$294,2$440,1$349,2#349,1$349,2],1,[330,1],5,[262,2$294,2$349,2$294,2$440,1$262,2$294,2$349,2$294,2$440,1$349,2#349,1$349,2],1,[330,1],5,[349,1$349,1$294,1$349,1$392,1$330,1#330,2$294,3$262,1#262,5],0,1,[294,1$294,1$330,1$349,1$294,0$262,1$523,1],1,[523,1$392,0$440,1$392,1$349,1],1,[294,1$294,1$330,1$349,1$294,1$349,1$392,1],1,[330,1$294,1$294,1#262,5],0,[294,1$294,1$330,1$349,1$294,1$262,0$392,1$392,1$392,1$440,1$392,0],0,[349,1#349,5$392,1$440,1$349,1$392,1$392,1$392,1$440,1$392,0$262,5],0,[294,1$330,1$349,1$294,1],1,[392,1$440,1$392,1#392,0],0,4,[262,2$294,2$349,2$294,2$440,2#440,1$440,2#440,1$392,1#392,0$262,2$294,2$349,2$294,2$392,2#392,1$392,2#392,1$349,2#349,1$330,2$294,1$262,2$294,2$349,2$294,2$349,0$392,1$330,2#330,1$294,2$262,0$262,1$392,0$349,5],1,[262,2$294,2$349,2$294,2$440,2#440,1$440,2#440,1$392,1#392,0$262,2$294,2$349,2$294,2$523,0$330,1$349,2#349,1$330,2$294,1$262,2$294,2$349,2$294,2$349,0$392,1$330,2#330,1$294,2$262,0$262,1$392,0$349,5],0,[262,2$294,2$349,2$294,2$440,2#440,1$440,2#440,1$392,1#392,0$262,2$294,2$349,2$294,2$392,2#392,1$392,2#392,1$349,2#349,1$330,2$294,1$262,2$294,2$349,2$294,2$349,0$392,1$330,2#330,1$294,2$262,0$262,1$392,0$349,5],1,[262,2$294,2$349,2$294,2$440,2#440,1$440,2#440,1$392,1#392,0$262,2$294,2$349,2$294,2$523,0$330,1$349,2#349,1$330,2$294,1$262,2$294,2$349,2$294,2$349,0$392,1$330,2#330,1$294,2$262,0$262,1$392,0$349,5],0,[262,2$294,2$349,2$294,2$440,2#440,1$440,2#440,1$392,1#392,0$262,2$294,2$349,2$294,2$392,2#392,1$392,2#392,1$349,2#349,1$330,2$294,1$262,2$294,2$349,2$294,2$349,0$392,1$330,2#330,1$294,2$262,0$262,1$392,0$349,5],1,[262,2$294,2$349,2$294,2$440,2#440,1$440,2#440,1$392,1#392,0$262,2$294,2$349,2$294,2$523,0$330,1$349,2#349,1$330,2$294,1$262,2$294,2$349,2$294,2$349,0$392,1$330,2#330,1$294,2$262,0$262,1$392,0$349,5],0]".replaceAll("#", "],[").replaceAll("$","],4,[")) as (number|number[])[]
// code
radio.setGroup(73)
music.setBuiltInSpeakerEnabled(true)
music.setVolume(255)
function getBeat(id: number) {
    let beat;
    switch (id) {
        case 0: beat = music.beat(BeatFraction.Whole); break;
        case 1: beat = music.beat(BeatFraction.Half); break;
        case 2: beat = music.beat(BeatFraction.Quarter); break;
        case 3: beat = music.beat(BeatFraction.Eighth); break;
        case 4: beat = music.beat(BeatFraction.Sixteenth); break;
        case 5: beat = music.beat(BeatFraction.Double); break;
        case 6: beat = music.beat(BeatFraction.Breve); break;
        default: beat = music.beat(BeatFraction.Sixteenth); break;
    }
    return beat
}

enum Status {
    Player, Controller, Controlling
}
let status: Status = null;

// Player
input.onButtonPressed(Button.A, () => {
    if (status !== null) return;
    status = Status.Player
    radio.onReceivedString(str=>{
        const arr = str.split(".")
        if (arr[0] === "rest") music.rest(parseInt(arr[1]))
        else music.playTone(parseInt(arr[1]), parseInt(arr[2]))
    })
})

// Controller
input.onButtonPressed(Button.B, ()=>{
    if (status !== null) return;
    status = Status.Controller
    input.onButtonPressed(Button.AB, ()=>{
        if (status === Status.Controlling) return;
        status = Status.Controlling
        for (let item of data) {
            if (typeof item == "number") {
                const beat = getBeat(item);
                radio.sendString(`rest.${beat}`)
                pause(beat+1)
            } else {
                const beat = getBeat(item[1]);
                radio.sendString(`play.${item[0]}.${beat}`)
                pause(beat+1)
            }
        }
    })
})